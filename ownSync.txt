Motivation for Proposal / Goal:
OwnCloud is a very promising project that enables users to host their own personal cloud. However, at times there is a need for the files hosted on the cloud to be available locally. But, mere copying the files from the server and using it offline brings in the problem of having multiple copies of the same file (one online and one offline). In such a situation the user needs an application that can keep the local copy of files and the one on the cloud in sync. At the same time the application must be:
1.Easy to use.
2.Portable.
3.Fast 
This is what my proposed Sync-Client aims to achieve.

Implementation Details:
My design of the  OwnCloud Sync Client is in 3 parts:
( Design Documentation: https://github.com/kunalghosh/GSoC_2011_ownCloud_Proposal/blob/master/ownCloud_ProposalPDF.pdf )

Part 1: The User Interface 
I propose to implement the user-interface in PyQt / PySide. The UI mock-ups can be found on pages 3,4,5 in the PDF above.(Please ignore the context of the mock-ups refer to in the PDF).All the settings that the user makes in the UI is saved in a configuration file which is then used by the backend. This makes the UI modular (if in the future some one wants to implement a better looking user interface they can very well do so).

The backend of the application is divided into two parts:
Part 2: Identify which files need to be synced. (Working)
    (The sync client doesn't provide versioning , it merely makes sure that every sync client has the most recent version of all the files)
    
    2.1 When the sync needs to be initiated all clients upload a text file, containing the filenames and their last modification times, to the server. Each of these files have a unique name (hash.txt ?)

    2.2 The server then generates a MASTER_FILE which contains the "most recent last modification time" , filename and client (which has the most recent copy of the file). (There is a problem here : What if two clients have a file with the same last modification time but the files contain differnt data ?)
    
    2.3 The server then generates individual files called CLIENT_UPLOAD_FILES one for each client. Containing only those file names which the client has the most recent copy  of(among all clients). The clients must upload only these files to the server.

    2.4 The server then creates a ".lock-clientID" file for each client that must upload files.

    2.5 Once a client finishes uploading all the files it deletes its .lock file.Each client waits till all lock files are deleted. 
    
    2.6 The server then generates a ".lock-download" file for each client that uploaded the text file in step 1. No upload happens till all download lock files are deleted. The Clients then download the MASTER_FILE and download only those files from the server which are present in MASTER_FILE but not in their CLIENT_UPLOAD_FILES.

    2.7 Now all clients have a synced copy of files.

Part 3: The Transport mechanism:
    
    <span style="text-decoration: line-through;">Option 1:Since most hosting providers provide FTP access , the sync client could use that (Even though ownCloud itself doesn't bundle an FTP server).</span>
    Option 2:WebDAV client API , there are a lot of python WebDAV client APIs which can be used. But most have poor documentation.
    Option 3:Mount the OwnCloud WebDAV Remote file-system in a hidden folder in the local file system and the transfer data. The problem with that is, Windows 7 (most widely deployed ) seems to have a broken implementation of WebDAV. But this is not a problem in case of Linux / MacOS.
        
   
Tentative Timeline (in weekly intervals until 2 weeks after the end of GSoC):
April 25 - May 2   : Familiarize myself with members of ownCloud team and which part each works on. 
May 3    - May 9   : Collect Feedback from team-members and refine implementation details.
May 10   - May 16  : Finalize on a Project WorkPlan (There must not be any ambiguity relating to implementation details at this point of time)
May 16   - May 25  : Finish Work on UI (Qt Creator)
May 26   - June 1  : Work on the File transfer Mechanism between Client and server. (Implementation)
June 2   - June 8  : Work on the File transfer Mechanism between Client and server. (Implementation)
June 9   - June 15 : Work on the File transfer Mechanism between Client and server. (Testing)
June 16  - June 22 : Work on the File transfer Mechanism between Client and server. (Bug Fix)
June 23  - June 29 : Implement Locking Mechanism in server. (As suggested in implementation details above)
June 30  - July 6  : Implement File Sync initiation from Client.
July 7   - July 13 : Implement File Sync initiation from Client.
- - - - - - - - - - - > Midterm
July 14  - July 20 : File Sync and Locking Mechanism. (Testing and Bug Fix)
- - - - - - - - - - - > All Components of Sync Client are ready at this point of time.
July 21  - July 27 : Test Client on Different OSes.
July 28  - Aug 7   : Fix Bugs, Polish (Collect Community FeedBack)
Aug 8    - Aug 11  : Write Documentation 
Aug 11   - Aug 14  : (Buffer Time)
- - - - - - - - - - - > Suggested Pencils Down
Aug 15   - Aug 22  : (Buffer Time)
- - - - - - - - - - - > Firm Pencils Down
Aug 23   - Aug 29  : Identify high priority feature requests ( As submitted by the community)
Aug 30   - Sep 5   : Create a Work Plan of the above, and start implementing.


Do you have other obligations from late May to early August :
I have my semester exams starting from May End to July 1st Week during which i would be busy with them. But apart from that I have no other obligations and would be available for my GSoC work.

About Me (let us know who you are!):
I am Kunal, an Engineering Student Studying Computer Science and Engineering in Bangalore, India. Using and Contributing to Free Software gives me peace of mind and happiness. Music Interests me and I try to play the Bansuri (Bamboo Flute). As a hobby , I volunteer for free software conferences, noticeably: PyCon india 2010 and KDE India Conference 2011.


 
